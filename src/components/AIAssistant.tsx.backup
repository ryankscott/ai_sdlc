import { useState } from "react";
import { useChat } from "ai/react";
import { Button } from "./ui/button";
import { X, Send, Sparkles, MessageSquare, CheckCircle } from "lucide-react";

interface AIAssistantProps {
  currentContent: string;
  onImprovement: (content: string) => void;
  onClose: () => void;
  isLoading: boolean;
  setIsLoading: (loading: boolean) => void;
}

type AssistantMode = "improve" | "critique" | "chat";

export function AIAssistant({
  currentContent,
  onImprovement,
  onClose,
  isLoading,
  setIsLoading,
}: AIAssistantProps) {
  const [mode, setMode] = useState<AssistantMode>("improve");
  const [response, setResponse] = useState("");

  // Use the Vercel AI SDK for chat functionality
  const {
    messages,
    input,
    handleInputChange,
    handleSubmit,
    append,
    isLoading: isChatLoading,
    setMessages,
  } = useChat({
    api: "/api/chat",
    body: {
      mode,
      currentContent,
    },
    onFinish: (message) => {
      if (mode === "improve" || mode === "critique") {
        setResponse(message.content);
      }
      setIsLoading(false);
    },
  });

  const handleAIRequest = async () => {
    if (!currentContent.trim() && mode !== "chat") {
      alert("Please add some content to your PRD first");
      return;
    }

    setIsLoading(true);
    setResponse("");

    try {
      let prompt = "";

      switch (mode) {
        case "improve":
          prompt = `Please improve this Product Requirements Document by making it more comprehensive, clear, and professional. Add missing sections if needed and enhance the existing content.`;
          break;
        case "critique":
          prompt = `Please provide a detailed critique of this Product Requirements Document. Point out what's missing, what could be improved, and what's done well.`;
          break;
        default:
          return;
      }

      // Clear previous messages for improve/critique modes
      setMessages([]);

      // Submit the request using append
      await append({ role: "user", content: prompt });
    } catch (error) {
      console.error("AI request failed:", error);
      setResponse(
        "Sorry, there was an error processing your request. Please try again."
      );
      setIsLoading(false);
    }
  };

  const applyImprovement = () => {
    if (mode === "improve" && response) {
      onImprovement(response);
      setResponse("");
    }
  };

  return (
    <div className="w-96 border-l border-gray-200 bg-white flex flex-col">
      {/* Header */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center justify-between mb-4">
          <h3 className="font-semibold text-gray-900">AI Assistant</h3>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="w-4 h-4" />
          </Button>
        </div>

        {/* Mode Selection */}
        <div className="flex space-x-1">
          <Button
            variant={mode === "improve" ? "default" : "ghost"}
            size="sm"
            onClick={() => setMode("improve")}
          >
            <Sparkles className="w-3 h-3" />
            Improve
          </Button>
          <Button
            variant={mode === "critique" ? "default" : "ghost"}
            size="sm"
            onClick={() => setMode("critique")}
          >
            <CheckCircle className="w-3 h-3" />
            Critique
          </Button>
          <Button
            variant={mode === "chat" ? "default" : "ghost"}
            size="sm"
            onClick={() => setMode("chat")}
          >
            <MessageSquare className="w-3 h-3" />
            Chat
          </Button>
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 flex flex-col p-4">
        {mode === "chat" && (
          <div className="flex-1 mb-4 overflow-y-auto">
            <div className="space-y-3">
              {messages.map((message, index) => (
                <div
                  key={index}
                  className={`p-3 rounded-lg ${
                    message.role === "user"
                      ? "bg-blue-100 text-blue-900 ml-4"
                      : "bg-gray-100 text-gray-900 mr-4"
                  }`}
                >
                  <div className="text-xs font-medium mb-1">
                    {message.role === "user" ? "You" : "AI Assistant"}
                  </div>
                  <div className="text-sm whitespace-pre-wrap">
                    {message.content}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {mode === "chat" && (
          <div className="space-y-2 mb-4">
            <textarea
              value={input}
              onChange={handleInputChange}
              placeholder="Ask me anything about your PRD..."
              className="w-full h-20 p-2 border border-gray-300 rounded resize-none text-sm"
            />
          </div>
        )}

        <Button
          onClick={mode === "chat" ? handleSubmit : handleAIRequest}
          disabled={
            isLoading || isChatLoading || (mode === "chat" && !input.trim())
          }
          className="mb-4"
        >
          <Send className="w-4 h-4" />
          {mode === "improve" && "Improve PRD"}
          {mode === "critique" && "Get Critique"}
          {mode === "chat" && "Send Message"}
        </Button>

        {/* Response */}
        {(response || isLoading || isChatLoading) && (
          <div className="flex-1 border border-gray-200 rounded-lg p-3 overflow-y-auto">
            {isLoading || isChatLoading ? (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                <span className="ml-2 text-sm text-gray-600">
                  Processing...
                </span>
              </div>
            ) : (
              <div>
                <div className="text-xs font-medium text-gray-500 mb-2">
                  AI Response:
                </div>
                <div className="text-sm text-gray-900 whitespace-pre-wrap">
                  {response}
                </div>
                {mode === "improve" && response && (
                  <Button onClick={applyImprovement} size="sm" className="mt-3">
                    Apply Changes
                  </Button>
                )}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
